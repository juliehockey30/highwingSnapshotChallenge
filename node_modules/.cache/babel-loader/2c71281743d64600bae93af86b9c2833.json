{"ast":null,"code":"var _jsxFileName = \"/Users/julieneuburger/Desktop/highwingSnapshotChallenge/src/components/bodySection/sectionData/SectionData.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport { SectionWrapper, GroupWrapper, CategoryTitle, ChartWrapper, VisualWrapper, LedgendWrapper, SelectedData, LegendColorTextWrapper, LedgendItem, LegendColor, StyledDoughnut, SelectedPercent } from './SectionData.styled.js';\n\nclass SectionData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedBrokerPremium: this.props.brokerData[0].premium,\n      selectedBrokerTitle: this.props.brokerData[0].title,\n      selectedBrokerPercent: this.props.brokerData[0].proportion,\n      selectedCarrierPremium: this.props.carrierData[0].premium,\n      selectedCarrierTitle: this.props.carrierData[0].title,\n      selectedCarrierPercent: this.props.carrierData[0].proportion\n    };\n    this.setSelectedDonutData = this.setSelectedDonutData.bind(this);\n  }\n\n  renderDonutChart(dataSet, group) {\n    const values = [];\n    dataSet.forEach(value => {\n      values.push(value.proportion);\n    });\n    const data = {\n      datasets: [{\n        data: values,\n        backgroundColor: ['#02c7b0', '#607d8b', '#30a200', '#013d40', '#006567', '#008f91', '#00afb1', '#00ce5f', '#00e833', '#01ff39#'],\n        borderWidth: 0\n      }]\n    };\n    const options = {\n      maintainAspectRatio: false,\n      cutoutPercentage: 80,\n      events: [],\n      elements: {\n        center: {\n          text: 'Red',\n          color: '#FF6384',\n          // Default is #000000\n          fontStyle: 'Arial',\n          // Default is Arial\n          sidePadding: 20,\n          // Default is 20 (as a percentage)\n          minFontSize: 20,\n          // Default is 20 (in px), set to false and text will not wrap.\n          lineHeight: 25 // Default is 25 (in px), used for when text wraps\n\n        }\n      }\n    };\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(SelectedPercent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, group === 'broker' ? `${Math.floor(this.state.selectedBrokerPercent)}%` : `${Math.floor(this.state.selectedCarrierPercent)}%`), React.createElement(Doughnut, {\n      data: data,\n      options: options,\n      height: 200,\n      width: 200,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(SelectedData, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, group === 'broker' ? `$${this.state.selectedBrokerPremium}` : `$${this.state.selectedCarrierPremium}`), React.createElement(SelectedData, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, group === 'broker' ? `${this.state.selectedBrokerTitle}` : `${this.state.selectedCarrierTitle}`));\n  }\n\n  setSelectedDonutData(group, i) {\n    if (group === 'broker') {\n      this.setState({\n        selectedBrokerPercent: this.props.brokerData[i].proportion,\n        selectedBrokerPremium: this.props.brokerData[i].premium,\n        selectedBrokerTitle: this.props.brokerData[i].title\n      });\n    } else {\n      this.setState({\n        selectedCarrierPercent: this.props.carrierData[i].proportion,\n        selectedCarrierPremium: this.props.carrierData[i].premium,\n        selectedCarrierTitle: this.props.carrierData[i].title\n      });\n    }\n  }\n\n  renderLegend(dataSet) {\n    const values = [];\n    dataSet.forEach(value => {\n      values.push(value);\n    });\n    const colors = ['#02c7b0', '#607d8b', '#30a200', '#013d40', '#006567', '#008f91', '#00afb1', '#00ce5f', '#00e833', '#01ff39#'];\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, values.map((value, i) => React.createElement(LegendColorTextWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(LegendColor, {\n      color: colors[i],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(LedgendItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, value.title))));\n  }\n\n  render() {\n    return React.createElement(SectionWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(GroupWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(CategoryTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, this.props.category), React.createElement(ChartWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(LedgendWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, this.renderLegend(this.props.brokerData)), React.createElement(VisualWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, this.renderDonutChart(this.props.brokerData, \"broker\")))), React.createElement(GroupWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(CategoryTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, this.props.category), React.createElement(ChartWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(LedgendWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, this.renderLegend(this.props.carrierData)), React.createElement(VisualWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, this.renderDonutChart(this.props.carrierData, \"carrier\")))));\n  }\n\n}\n\nexport default SectionData;","map":{"version":3,"sources":["/Users/julieneuburger/Desktop/highwingSnapshotChallenge/src/components/bodySection/sectionData/SectionData.js"],"names":["React","Component","Fragment","Doughnut","SectionWrapper","GroupWrapper","CategoryTitle","ChartWrapper","VisualWrapper","LedgendWrapper","SelectedData","LegendColorTextWrapper","LedgendItem","LegendColor","StyledDoughnut","SelectedPercent","SectionData","constructor","props","state","selectedBrokerPremium","brokerData","premium","selectedBrokerTitle","title","selectedBrokerPercent","proportion","selectedCarrierPremium","carrierData","selectedCarrierTitle","selectedCarrierPercent","setSelectedDonutData","bind","renderDonutChart","dataSet","group","values","forEach","value","push","data","datasets","backgroundColor","borderWidth","options","maintainAspectRatio","cutoutPercentage","events","elements","center","text","color","fontStyle","sidePadding","minFontSize","lineHeight","Math","floor","i","setState","renderLegend","colors","map","render","category"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport {\n  SectionWrapper,\n  GroupWrapper,\n  CategoryTitle,\n  ChartWrapper,\n  VisualWrapper,\n  LedgendWrapper,\n  SelectedData,\n  LegendColorTextWrapper,\n  LedgendItem,\n  LegendColor,\n  StyledDoughnut,\n  SelectedPercent\n} from './SectionData.styled.js';\n\nclass SectionData extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      selectedBrokerPremium: this.props.brokerData[0].premium,\n      selectedBrokerTitle: this.props.brokerData[0].title,\n      selectedBrokerPercent: this.props.brokerData[0].proportion,\n      selectedCarrierPremium: this.props.carrierData[0].premium,\n      selectedCarrierTitle: this.props.carrierData[0].title,\n      selectedCarrierPercent: this.props.carrierData[0].proportion,\n    };\n\n    this.setSelectedDonutData = this.setSelectedDonutData.bind(this);\n  }\n\n  renderDonutChart(dataSet, group) {\n    const values = [];\n    dataSet.forEach(value => {\n      values.push(value.proportion);\n    });\n\n    const data = {\n      datasets:\n        [{\n          data: values,\n          backgroundColor: ['#02c7b0', '#607d8b', '#30a200', '#013d40', '#006567', '#008f91', '#00afb1', '#00ce5f', '#00e833', '#01ff39#' ],\n          borderWidth: 0,\n        }],\n    }\n    const options = {\n      maintainAspectRatio: false,\n      cutoutPercentage: 80,\n      events: [],\n      elements: {\n        center: {\n          text: 'Red',\n          color: '#FF6384', // Default is #000000\n          fontStyle: 'Arial', // Default is Arial\n          sidePadding: 20, // Default is 20 (as a percentage)\n          minFontSize: 20, // Default is 20 (in px), set to false and text will not wrap.\n          lineHeight: 25 // Default is 25 (in px), used for when text wraps\n        }\n      }\n    }\n\n    return (\n      <Fragment>\n        <SelectedPercent>\n          {group === 'broker' ?\n            `${Math.floor(this.state.selectedBrokerPercent)}%`\n            : `${Math.floor(this.state.selectedCarrierPercent)}%`\n          }\n        </SelectedPercent>\n        <Doughnut\n          data={data}\n          options={options}\n          height={200}\n          width={200}\n        />\n        <SelectedData>\n          {group === 'broker' ? `$${this.state.selectedBrokerPremium}` : `$${this.state.selectedCarrierPremium}`}\n        </SelectedData>\n        <SelectedData>\n          {group === 'broker' ? `${this.state.selectedBrokerTitle}` : `${this.state.selectedCarrierTitle}`}\n        </SelectedData>\n      </Fragment>\n    )\n  }\n\n  setSelectedDonutData(group, i) {\n    if(group === 'broker') {\n      this.setState({\n        selectedBrokerPercent: this.props.brokerData[i].proportion,\n        selectedBrokerPremium: this.props.brokerData[i].premium,\n        selectedBrokerTitle: this.props.brokerData[i].title\n      });\n    } else {\n      this.setState({\n        selectedCarrierPercent: this.props.carrierData[i].proportion,\n        selectedCarrierPremium: this.props.carrierData[i].premium,\n        selectedCarrierTitle: this.props.carrierData[i].title\n      });\n    }\n  }\n\n  renderLegend(dataSet) {\n    const values = [];\n    dataSet.forEach(value => {\n      values.push(value);\n    });\n\n    const colors = ['#02c7b0', '#607d8b', '#30a200', '#013d40', '#006567', '#008f91', '#00afb1', '#00ce5f', '#00e833', '#01ff39#' ]\n\n    return (\n      <Fragment>\n        {values.map((value, i) => (\n          <LegendColorTextWrapper>\n            <LegendColor color={colors[i]}/>\n            <LedgendItem>{value.title}</LedgendItem>\n          </LegendColorTextWrapper>\n        ))}\n      </Fragment>\n    );\n  }\n\n  render() {\n    return (\n      <SectionWrapper>\n        <GroupWrapper>\n          <CategoryTitle>{this.props.category}</CategoryTitle>\n          <ChartWrapper>\n            <LedgendWrapper>\n              {this.renderLegend(this.props.brokerData)}\n            </LedgendWrapper>\n            <VisualWrapper>\n              {this.renderDonutChart(this.props.brokerData, \"broker\")}\n            </VisualWrapper>\n          </ChartWrapper>\n        </GroupWrapper>\n        <GroupWrapper>\n          <CategoryTitle>{this.props.category}</CategoryTitle>\n          <ChartWrapper>\n            <LedgendWrapper>\n              {this.renderLegend(this.props.carrierData)}\n            </LedgendWrapper>\n            <VisualWrapper>\n              {this.renderDonutChart(this.props.carrierData, \"carrier\")}\n            </VisualWrapper>\n          </ChartWrapper>\n        </GroupWrapper>\n      </SectionWrapper>\n    );\n  }\n}\n\nexport default SectionData;\n"]},"metadata":{},"sourceType":"module"}